{"ast":null,"code":"var _jsxFileName = \"/home/hasael/Desktop/belajar-react js/practically react-router/frontend/src/pages/Events.jsx\",\n  _s = $RefreshSig$();\nimport { Suspense } from \"react\";\nimport { defer, json, useLoaderData, Await } from \"react-router-dom\";\nimport EventsList from \"../components/EventsList\";\n\n// function EventsPage() {\n//   const data = useLoaderData();\n\n//   // if (data.isError) {\n//   //   return <p>{data.message}</p>;\n//   // }\n\n//   const events = data.events;\n\n//   return (\n//     <>\n//       <EventsList events={events} />\n//     </>\n//   );\n// }\n// // useLoaderData bisa juga digunakan di children parent nya atau di bawah parent nya sebagain contoh bisa di lihat di dalam eventList\n// // dan useLoaderdata tidak bisa digunakan di dalam router yang lebih tinggi\n// export default EventsPage;\n\n// export const loader = async () => {\n//   const response = await fetch(\"http://localhost:8080/events/\");\n\n//   if (!response.ok) {\n//     // return { isError: true, message: \"there was a problem at the event!\" };\n//     // throw new Response(JSON.stringify({ message: \"cold not fetch events\" }), {\n//     //   status: 500,\n//     // });\n//     return json(\n//       { message: \"there was a problem at the event!\" },\n//       {\n//         status: 500,\n//       }\n//     );\n//   } else {\n//     const resData = await response.json();\n//     return resData;\n//   }\n// };\n\n// fetching data with defer()omething went wrong\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction EventsPage() {\n  _s();\n  const {\n    events\n  } = useLoaderData();\n  return /*#__PURE__*/_jsxDEV(Suspense, {\n    fallback: /*#__PURE__*/_jsxDEV(\"p\", {\n      style: textAlign = \"center\",\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 25\n    }, this),\n    children: /*#__PURE__*/_jsxDEV(Await, {\n      resolve: events,\n      children: loadedEvents => /*#__PURE__*/_jsxDEV(EventsList, {\n        events: loadedEvents\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 28\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n}\n// useLoaderData bisa juga digunakan di children parent nya atau di bawah parent nya sebagain contoh bisa di lihat di dalam eventList\n// dan useLoaderdata tidak bisa digunakan di dalam router yang lebih tinggi\n_s(EventsPage, \"xTcuS98fsVcq20se00iLm8bDBmQ=\", false, function () {\n  return [useLoaderData];\n});\n_c = EventsPage;\nexport default EventsPage;\nasync function loadEvents() {\n  const response = await fetch(\"http://localhost:8080/events\");\n  if (!response.ok) {\n    // return { isError: true, message: \"there was a problem at the event!\" };\n    // throw new Response(JSON.stringify({ message: \"cold not fetch events\" }), {\n    //   status: 500,\n    // });\n    return json({\n      message: \"could not fetch events\"\n    }, {\n      status: 500\n    });\n  } else {\n    const resData = await response.json();\n    return resData.events;\n  }\n}\nexport function loader() {\n  return defer({\n    events: loadEvents()\n  });\n}\nvar _c;\n$RefreshReg$(_c, \"EventsPage\");","map":{"version":3,"names":["Suspense","defer","json","useLoaderData","Await","EventsList","EventsPage","events","textAlign","loadedEvents","loadEvents","response","fetch","ok","message","status","resData","loader"],"sources":["/home/hasael/Desktop/belajar-react js/practically react-router/frontend/src/pages/Events.jsx"],"sourcesContent":["import { Suspense } from \"react\";\nimport { defer, json, useLoaderData, Await } from \"react-router-dom\";\n\nimport EventsList from \"../components/EventsList\";\n\n// function EventsPage() {\n//   const data = useLoaderData();\n\n//   // if (data.isError) {\n//   //   return <p>{data.message}</p>;\n//   // }\n\n//   const events = data.events;\n\n//   return (\n//     <>\n//       <EventsList events={events} />\n//     </>\n//   );\n// }\n// // useLoaderData bisa juga digunakan di children parent nya atau di bawah parent nya sebagain contoh bisa di lihat di dalam eventList\n// // dan useLoaderdata tidak bisa digunakan di dalam router yang lebih tinggi\n// export default EventsPage;\n\n// export const loader = async () => {\n//   const response = await fetch(\"http://localhost:8080/events/\");\n\n//   if (!response.ok) {\n//     // return { isError: true, message: \"there was a problem at the event!\" };\n//     // throw new Response(JSON.stringify({ message: \"cold not fetch events\" }), {\n//     //   status: 500,\n//     // });\n//     return json(\n//       { message: \"there was a problem at the event!\" },\n//       {\n//         status: 500,\n//       }\n//     );\n//   } else {\n//     const resData = await response.json();\n//     return resData;\n//   }\n// };\n\n// fetching data with defer()omething went wrong\n\nfunction EventsPage() {\n  const { events } = useLoaderData();\n\n  return (\n    <Suspense fallback={<p style={(textAlign = \"center\")}>Loading...</p>}>\n      <Await resolve={events}>\n        {(loadedEvents) => <EventsList events={loadedEvents} />}\n      </Await>\n    </Suspense>\n  );\n}\n// useLoaderData bisa juga digunakan di children parent nya atau di bawah parent nya sebagain contoh bisa di lihat di dalam eventList\n// dan useLoaderdata tidak bisa digunakan di dalam router yang lebih tinggi\nexport default EventsPage;\n\nasync function loadEvents() {\n  const response = await fetch(\"http://localhost:8080/events\");\n\n  if (!response.ok) {\n    // return { isError: true, message: \"there was a problem at the event!\" };\n    // throw new Response(JSON.stringify({ message: \"cold not fetch events\" }), {\n    //   status: 500,\n    // });\n    return json(\n      { message: \"could not fetch events\" },\n      {\n        status: 500,\n      }\n    );\n  } else {\n    const resData = await response.json();\n    return resData.events;\n  }\n}\n\nexport function loader() {\n  return defer({\n    events: loadEvents(),\n  });\n}\n"],"mappings":";;AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,SAASC,KAAK,EAAEC,IAAI,EAAEC,aAAa,EAAEC,KAAK,QAAQ,kBAAkB;AAEpE,OAAOC,UAAU,MAAM,0BAA0B;;AAEjD;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAA;AAEA,SAASC,UAAU,GAAG;EAAA;EACpB,MAAM;IAAEC;EAAO,CAAC,GAAGJ,aAAa,EAAE;EAElC,oBACE,QAAC,QAAQ;IAAC,QAAQ,eAAE;MAAG,KAAK,EAAGK,SAAS,GAAG,QAAU;MAAA,UAAC;IAAU;MAAA;MAAA;MAAA;IAAA,QAAK;IAAA,uBACnE,QAAC,KAAK;MAAC,OAAO,EAAED,MAAO;MAAA,UACnBE,YAAY,iBAAK,QAAC,UAAU;QAAC,MAAM,EAAEA;MAAa;QAAA;QAAA;QAAA;MAAA;IAAG;MAAA;MAAA;MAAA;IAAA;EACjD;IAAA;IAAA;IAAA;EAAA,QACC;AAEf;AACA;AACA;AAAA,GAZSH,UAAU;EAAA,QACEH,aAAa;AAAA;AAAA,KADzBG,UAAU;AAanB,eAAeA,UAAU;AAEzB,eAAeI,UAAU,GAAG;EAC1B,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAA8B,CAAC;EAE5D,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;IAChB;IACA;IACA;IACA;IACA,OAAOX,IAAI,CACT;MAAEY,OAAO,EAAE;IAAyB,CAAC,EACrC;MACEC,MAAM,EAAE;IACV,CAAC,CACF;EACH,CAAC,MAAM;IACL,MAAMC,OAAO,GAAG,MAAML,QAAQ,CAACT,IAAI,EAAE;IACrC,OAAOc,OAAO,CAACT,MAAM;EACvB;AACF;AAEA,OAAO,SAASU,MAAM,GAAG;EACvB,OAAOhB,KAAK,CAAC;IACXM,MAAM,EAAEG,UAAU;EACpB,CAAC,CAAC;AACJ;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}