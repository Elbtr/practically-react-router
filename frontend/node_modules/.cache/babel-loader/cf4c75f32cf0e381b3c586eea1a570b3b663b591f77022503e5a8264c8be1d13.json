{"ast":null,"code":"var _jsxFileName = \"/home/hasael/Desktop/belajar-react js/practically react-router/frontend/src/pages/NewEvent.jsx\";\nimport { json } from \"react-router-dom\";\nimport EventForm from \"../components/EventForm\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction NewEvent() {\n  return /*#__PURE__*/_jsxDEV(EventForm, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 5,\n    columnNumber: 10\n  }, this);\n}\n_c = NewEvent;\nexport default NewEvent;\nexport async function action(_ref) {\n  let {\n    request,\n    params\n  } = _ref;\n  const data = await request.formData();\n  const eventData = {\n    title: data.get(\"title\"),\n    image: data.get(\"image\"),\n    date: data.get(\"date\"),\n    description: data.get(\"description\")\n  };\n  const response = await fetch(\"http://localhost:8080/events/\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/jason\"\n    },\n    body: JSON.stringify(eventData)\n  });\n  if (!response.ok) {\n    throw json({\n      message: \"cold not save event.!\"\n    }, {\n      status: 500\n    });\n  }\n}\nvar _c;\n$RefreshReg$(_c, \"NewEvent\");","map":{"version":3,"names":["json","EventForm","NewEvent","action","request","params","data","formData","eventData","title","get","image","date","description","response","fetch","method","headers","body","JSON","stringify","ok","message","status"],"sources":["/home/hasael/Desktop/belajar-react js/practically react-router/frontend/src/pages/NewEvent.jsx"],"sourcesContent":["import { json } from \"react-router-dom\";\nimport EventForm from \"../components/EventForm\";\n\nfunction NewEvent() {\n  return <EventForm />;\n}\n\nexport default NewEvent;\n\nexport async function action({ request, params }) {\n  const data = await request.formData();\n\n  const eventData = {\n    title: data.get(\"title\"),\n    image: data.get(\"image\"),\n    date: data.get(\"date\"),\n    description: data.get(\"description\"),\n  };\n\n  const response = await fetch(\"http://localhost:8080/events/\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/jason\",\n    },\n    body: JSON.stringify(eventData),\n  });\n\n  if (!response.ok) {\n    throw json({ message: \"cold not save event.!\" }, { status: 500 });\n  }\n}\n"],"mappings":";AAAA,SAASA,IAAI,QAAQ,kBAAkB;AACvC,OAAOC,SAAS,MAAM,yBAAyB;AAAC;AAEhD,SAASC,QAAQ,GAAG;EAClB,oBAAO,QAAC,SAAS;IAAA;IAAA;IAAA;EAAA,QAAG;AACtB;AAAC,KAFQA,QAAQ;AAIjB,eAAeA,QAAQ;AAEvB,OAAO,eAAeC,MAAM,OAAsB;EAAA,IAArB;IAAEC,OAAO;IAAEC;EAAO,CAAC;EAC9C,MAAMC,IAAI,GAAG,MAAMF,OAAO,CAACG,QAAQ,EAAE;EAErC,MAAMC,SAAS,GAAG;IAChBC,KAAK,EAAEH,IAAI,CAACI,GAAG,CAAC,OAAO,CAAC;IACxBC,KAAK,EAAEL,IAAI,CAACI,GAAG,CAAC,OAAO,CAAC;IACxBE,IAAI,EAAEN,IAAI,CAACI,GAAG,CAAC,MAAM,CAAC;IACtBG,WAAW,EAAEP,IAAI,CAACI,GAAG,CAAC,aAAa;EACrC,CAAC;EAED,MAAMI,QAAQ,GAAG,MAAMC,KAAK,CAAC,+BAA+B,EAAE;IAC5DC,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACP,cAAc,EAAE;IAClB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACZ,SAAS;EAChC,CAAC,CAAC;EAEF,IAAI,CAACM,QAAQ,CAACO,EAAE,EAAE;IAChB,MAAMrB,IAAI,CAAC;MAAEsB,OAAO,EAAE;IAAwB,CAAC,EAAE;MAAEC,MAAM,EAAE;IAAI,CAAC,CAAC;EACnE;AACF;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}